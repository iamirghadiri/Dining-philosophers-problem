 #Here's an example implementation of the Dining Philosophers Problem in Python using threading and locks:
 import threading

class Philosopher(threading.Thread):
    def __init__(self, name, left_fork, right_fork, lock):
        threading.Thread.__init__(self)
        self.name = name
        self.left_fork = left_fork
        self.right_fork = right_fork
        self.lock = lock

    def run(self):
        while True:
            self.lock.acquire()
            if self.left_fork.acquire(blocking=False):
                if self.right_fork.acquire(blocking=False):
                    print(f"{self.name} is eating")
                    self.right_fork.release()
                self.left_fork.release()
            self.lock.release()

if __name__ == "__main__":
    forks = [threading.Lock() for i in range(5)]
    philosophers = [
        Philosopher("Philosopher {}".format(i), forks[i], forks[(i+1) % 5], threading.Lock())
        for i in range(5)
    ]
    for philosopher in philosophers:
        philosopher.start()
        
        
        
        
        #######################################################################################
       #another example
       import threading
import time
import random

class Philosopher(threading.Thread):
    def __init__(self, index, left_chopstick, right_chopstick):
        threading.Thread.__init__(self)
        self.index = index
        self.left_chopstick = left_chopstick
        self.right_chopstick = right_chopstick

    def run(self):
        while True:
            # Think for a while
            print(f"Philosopher {self.index} is thinking.")
            time.sleep(random.uniform(1, 5))

            # Try to pick up the left chopstick
            print(f"Philosopher {self.index} is hungry and trying to pick up the left chopstick.")
            self.left_chopstick.acquire()
            print(f"Philosopher {self.index} has picked up the left chopstick.")

            # Try to pick up the right chopstick
            print(f"Philosopher {self.index} is trying to pick up the right chopstick.")
            if self.right_chopstick.acquire(blocking=False):
                print(f"Philosopher {self.index} has picked up the right chopstick and is eating.")
                time.sleep(random.uniform(1, 5))
                print(f"Philosopher {self.index} has finished eating and put down the right chopstick.")
                self.right_chopstick.release()
            else:
                print(f"Philosopher {self.index} could not pick up the right chopstick and has put down the left chopstick.")
            self.left_chopstick.release()

if __name__ == "__main__":
    # Create 5 chopsticks
    chopsticks = [threading.Lock() for i in range(5)]

    # Create 5 philosophers
    philosophers = [Philosopher(i, chopsticks[i], chopsticks[(i+1) % 5]) for i in range(5)]

    # Start the threads
    for philosopher in philosophers:
        philosopher.start()
